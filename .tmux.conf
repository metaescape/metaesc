# # [[file:~/org/logical/tmux.org::*本地主配置][本地主配置:1]]
# # [[file:~/org/logical/tmux.org::basic-setting][basic-setting]]
set-option -g default-shell "/bin/bash"
unbind C-b # shorthand for unbind-key C-b
set -g prefix 'M-o'
set -sg escape-time 1

#window index start from 0, 0号window可以作为一个playground, 以下为1
set -g base-index 1
setw -g pane-base-index 1 #setw is short hand of set-window-option
set -g renumber-windows on #renumber after kill window 

#use tumx keymap to source and display, this is elegant than bash alias

bind r source-file ~/.tmux.conf\; display "Reloaded!"

set -g history-limit 7000
bind X confirm-before -p "kill-Session #S? (y/n)" kill-session
bind -n M-Q confirm-before -p "kill-window #W? (y/n)" kill-window
bind -n M-r command-prompt -I "" "rename-window '%%'"
bind -n M-R command-prompt -I "" "rename-session '%%'"
# # basic-setting ends here
# # [[file:~/org/logical/tmux.org::window-pane][window-pane]]

#######################
### window and pane ###
#######################
bind-key c new-window -c "#{pane_current_path}"
# bind-key -n M-n new-window -c "#{pane_current_path}"
bind-key \\ split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key -n M-\\ split-window -h -c "#{pane_current_path}"
bind-key -n M-- split-window -v -c "#{pane_current_path}"
bind-key -n M-= next-layout
unbind-key %
unbind-key '"'

#鼠标选中即进入copy mode，且不会打破terminal的选中即复制
set -g mouse on
#swith between panes directly
bind-key -n M-h select-pane -L
#\; send-keys C-x h C-m
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R
bind-key H swap-pane -s left
bind-key J swap-pane -s bottom
bind-key K swap-pane -s top
bind-key L swap-pane -s right
#reszie pane
bind-key -n M-H resize-pane -L 3
bind-key -n M-J resize-pane -D 3
bind-key -n M-K resize-pane -U 3
bind-key -n M-L resize-pane -R 3
bind-key -n M-w last-window
bind-key -n M-s switch-client -l
bind-key -n M-m resize-pane -Z
bind-key -n M-: command-prompt

# select window
bind-key -n M-0 if-shell "[ $(tmux display-message -p '#I') -eq 0 ]" "last-window" "select-window -t :0"
bind-key -n M-1 if-shell "[ $(tmux display-message -p '#I') -eq 1 ]" "last-window" "select-window -t :1"
bind-key -n M-2 if-shell "[ $(tmux display-message -p '#I') -eq 2 ]" "last-window" "select-window -t :2"
bind-key -n M-3 if-shell "[ $(tmux display-message -p '#I') -eq 3 ]" "last-window" "select-window -t :3"
bind-key -n M-4 if-shell "[ $(tmux display-message -p '#I') -eq 4 ]" "last-window" "select-window -t :4"
bind-key -n M-5 if-shell "[ $(tmux display-message -p '#I') -eq 5 ]" "last-window" "select-window -t :5"
bind-key -n M-6 if-shell "[ $(tmux display-message -p '#I') -eq 6 ]" "last-window" "select-window -t :6"
bind-key -n M-7 if-shell "[ $(tmux display-message -p '#I') -eq 7 ]" "last-window" "select-window -t :7"
bind-key -n M-8 if-shell "[ $(tmux display-message -p '#I') -eq 8 ]" "last-window" "select-window -t :8"
bind-key -n M-9 if-shell "[ $(tmux display-message -p '#I') -eq 9 ]" "last-window" "select-window -t :9"
# bind-key -n M-9 select-window -t :9

#switch between windows,no need, use window numbers
bind-key -n M-< select-window -t :-
bind-key -n M-> select-window -t :+
bind-key S set-window-option synchronize-panes

# don't rename windows automatically
set-option -g automatic-rename off

#useful to "break" a pane out of the current window and into a new window
bind-key b break-pane -d
bind-key t choose-tree
bind-key T display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"
# # window-pane ends here
# # [[file:~/org/logical/tmux.org::style][style]]
######################
###   STYLE        ###
######################

# loud or quiet?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none

# color and style
set -g default-terminal "screen-256color"

# windows status in left|right|centre
set -g status-justify centre
set-option -g status-interval 1
setw -g window-status-current-format ' #I-#P #W#F '
setw -g window-status-format ' #I: #W#F '
set -g status-left-length 20
setw -g pane-border-status top
#On first session, tmux says "no current session" without -g
setw -g pane-border-format "#{pane_current_path}"
# # style ends here
# # [[file:~/org/logical/tmux.org::pipz-theme][pipz-theme]]
set-option -g status-fg colour12
# tmux<3.2
# set-option -g status-bg default
set-option -g status-style bg=default

setw -g window-status-style 'fg=colour246 bg=default dim'
setw -g window-status-current-style "fg=colour4 bg=colour233 bright"
set -g status-right-length 60
set -g status-right '#[fg=colour189,bg=default]  %D %H:%M  '
set -g status-left "#[fg=colour189] #S #[default] "
set -g pane-border-style 'fg=colour239 bg=default'
set -g pane-active-border-style 'fg=colour14 bg=default bright'
# messages
set -g message-style 'fg=colour12 bg=default bold'
# # pipz-theme ends here
# # [[file:~/org/logical/tmux.org::vim-tmux][vim-tmux]]
# cursor change work properly in vim + tmux
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

#set-hook after-kill-session run-shell "rm /tmp/.tmux_buff/#{session_name}*"
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  	  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
#tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
#if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  #"bind-key -n 'M-p' if-shell \"$is_vim\" 'send-keys M-p' 'select-pane -l'"
bind-key -n 'M-;' if-shell "$is_vim" 'send-keys M-;' 'last-pane'

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-p' select-pane -l
# # vim-tmux ends here
# # [[file:~/org/logical/tmux.org::copy-mode][copy-mode]]
setw -g mode-keys vi
bind -n M-] paste-buffer
# bind -n M-/ copy-mode \; send-keys "\/"
bind -n M-V copy-mode \; send-keys "V"
bind -n M-v copy-mode \; send-keys "v"
bind -n M-c copy-mode
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'V' send -X select-line
bind-key -Tcopy-mode-vi 'r' send -X rectangle-toggle
#bind-key -Tcopy-mode-vi 'y' send -X copy-selection
bind-key -Tcopy-mode-vi C-c send -X cancel
bind-key -Tcopy-mode-vi Escape send -X cancel
bind-key -Tcopy-mode-vi 'u' send -X halfpage-up
bind-key -Tcopy-mode-vi 'd' send -X halfpage-down
bind-key -Tcopy-mode-vi 'L' send -X end-of-line
bind-key -Tcopy-mode-vi 'H' send -X start-of-line
bind-key -Tcopy-mode-vi 'J' send-keys jjjjj
bind-key -Tcopy-mode-vi 'K' send-keys kkkkk

#https://www.grailbox.com/2020/08/use-system-clipboard-for-vi-copy-mode-in-tmux-in-macos-and-linux/
if-shell "uname | grep -q Darwin" {
    bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
    bind-key -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"
} {
    bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -selection c"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cance "xclip -in -selection clipboard"
}

# # copy-mode ends here
# # [[file:~/org/logical/tmux.org::plugins][plugins]]
# List of plugins
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

set -g @plugin 'sainnhe/tmux-fzf'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
# # plugins ends here
# # 本地主配置:1 ends here
